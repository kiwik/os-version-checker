import groovy.json.JsonOutput
import groovy.json.JsonSlurper

@NonCPS
def jsonParse(def json) {
    new groovy.json.JsonSlurper().parseText(json)
}

def generate_manifest(images){
  StringBuilder manifest = new StringBuilder("""apiVersion: v1
kind: Pod
spec:
  volumes:
  - name: os-version-checker-storage
    emptyDir: {}
  initContainers:
  - name: os-version-checker-init
    image: dockerhub.ultimum.io/ultimum-internal/os-version-checker:latest
    volumeMounts:
      - name: os-version-checker-storage
        mountPath: /tmp
    imagePullPolicy: Always
    securityContext:
      runAsUser: 0
    command: ["/bin/sh"]
    args: ["-c", "cp -a /opt/app/* /tmp"]
  containers:
  - name: os-version-checker
    image: dockerhub.ultimum.io/ultimum-internal/os-version-checker:latest
    volumeMounts:
    - name: os-version-checker-storage
      mountPath: /tmp
    imagePullPolicy: Always
    securityContext:
      runAsUser: 0
    command: ["/bin/sh"]
    args: ["-c", "cat"]
    tty: true
  - name: proxy
    image: dockerhub.ultimum.io/ultimum-internal/internal-proxy:latest
    imagePullPolicy: Always
    command: ["/bin/sh"]
    args: ["-c", "cat"]
    tty: true""")
  def container = """  - name: %s-%s
    image: %s
    volumeMounts:
    - name: os-version-checker-storage
      mountPath: /tmp
    imagePullPolicy: Always
    securityContext:
      runAsUser: 0
    command: ["/bin/sh"]
    args: ["-c", "cd /tmp; ./get_image_versions.sh %s %s; cat"]
    tty: true"""
  for (String image in images){
    image_name = image.split('/')[2].split(':')[0]
    image_tag = image.split('/')[2].split(':')[1]
    manifest.append("\n")
    manifest.append(String.format(container, image_name, image_tag, image, image_name, image_tag))
  }
  return manifest.toString()
}

def get_images(user, images, dockerhub, repository, tag){
  def continuationToken = ""

  while(true){
    def curlResponse
    def parsedJson
    if (continuationToken == ""){
      curlResponse = ""
      curlResponse = sh(
        script: "curl -u ${user} -sb GET 'http://localhost:8080/nexus/service/rest/v1/search?repository=${repository}&docker.imageTag=${tag}'",
        returnStdout: true
      ).trim().toString()
    }else{
        curlResponse = ""
        curlResponse = sh(
          script: "curl -u ${user} -sb GET 'http://localhost:8080/nexus/service/rest/v1/search?repository=${repository}&docker.imageTag=${tag}&continuationToken=${continuationToken}'",
          returnStdout: true
        ).trim().toString()
    }

    if (curlResponse == null) {
      echo 'curlResponse is NULL'
      return
    }
    parsedJson = jsonParse(curlResponse)
    for (item in parsedJson.items){
      images.add([dockerhub, '/', item.name, ':', tag].join(''))
    }
    if(parsedJson.continuationToken){
      continuationToken = parsedJson.continuationToken
      continue
    }else{
      continuationToken = ""
      break
    }
  }
  return images
}

podTemplate(
  yaml: """
apiVersion: v1
kind: Pod
metadata:
  name: parent-pod
spec:
  containers:
  - name: proxy
    image: dockerhub.ultimum.io/ultimum-internal/internal-proxy:latest
    alwaysPullImage: true
    command:
    - cat
    tty: true
"""
)
{
  node(POD_LABEL){
    stage('Configure proxy'){
      container('proxy'){
        withCredentials([certificate(aliasVariable: '', credentialsId: 'e256026f-b227-4f8e-92b0-220d3ccb7079', keystoreVariable: 'KEYSTORE', passwordVariable: 'KEYSTORE_PASS')]){
          sh "start_proxy.sh $KEYSTORE $KEYSTORE_PASS"
        }
      }
    }
    stage('Generate manifest'){
      container('proxy'){
        def images = []
        String[] filters = env.IMAGE_FILTERS.split(',')
        for (String item in filters) {
          String[] filter = item.split(':')
          withCredentials([usernameColonPassword(credentialsId: '59c660c7-216d-4eaf-9294-0b11abba096d', variable: 'NEXUS_USER')]) {
            images = get_images("${NEXUS_USER}",images, filter[0], filter[1], filter[2])
          }
        }
        env.MANIFEST = generate_manifest(images)
        echo env.MANIFEST
      }
    }
  }
}
